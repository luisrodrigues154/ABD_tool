@set VERSIONno 3.6.2
@set VERSION 3.6.2 (2019-12-12)
@set RWVERSION 

Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> glue
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> ..lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> glue
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> glue
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> readRDS
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.character
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> gzfile
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> on.exit
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> environment
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getDLLRegisteredRoutines
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> :
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lapply
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> lapply
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> force
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> force
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> force
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> force
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> force
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> paste0
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assignWrapped
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> delayedAssign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> globalenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> attach
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> structure
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> R.Version
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> interactive
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> interactive
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3
TYPEOF return 19


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> identical
TYPEOF(op) 3
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
TYPEOF return 16


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> sub
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.setenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> .expand_R_libs_env_var
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.setenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .expand_R_libs_env_var
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> R.home
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> nchar
TYPEOF(op) 3
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> R.home
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
TYPEOF return 16


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> file.exists
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> invisible
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> .libPaths
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> unlist
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> strsplit
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> unlist
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> strsplit
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .libPaths
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> dirname
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.exists
TYPEOF(op) 3
TYPEOF return 16


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> bindtextdomain
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> bindtextdomain
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> assign
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> nchar
TYPEOF(op) 3
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getlocale
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nchar
TYPEOF(op) 3
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3
TYPEOF return 16
TYPEOF return 16


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> R.home
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ==
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> grepl
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> while
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> length
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> >
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> table
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.ordered
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ==
TYPEOF(op) 8
Will compare
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Returned value nan
TYPEOF return 14


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> list.names
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare
TYPEOF return 0


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> Sys.getenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> nzchar
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> .OptRequireMethods
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> %in%
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> existsInFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> mkenv
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> set
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getFromFrame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> parent.env<-
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> .Internal
TYPEOF(op) 7
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> names
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> seq_along
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> &&
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Back to do_if
LEN 2
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Back to do_if
LEN 2
TYPEOF return 0


Hum, SYMSXP
CAR(e) -> .First.sys
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> for
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> -
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> character
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> as.character
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> missing
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> character
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> character
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> character
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> require
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> !
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> [[
TYPEOF(op) 7
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> getOption
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> local
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> eval
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> quote
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> new.env
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> parent.frame
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> loadingNamespaceInfo
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> .getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.name
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> is.null
TYPEOF(op) 8
Back to do_if
LEN 2


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> file.path
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoad
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> close
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> function
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> !=
TYPEOF(op) 8
Will compare


Hum, SYMSXP
CAR(e) -> options
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare
Will compare


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ||
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> is.list
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> is.pairlist
TYPEOF(op) 8
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> baseenv
TYPEOF(op) 8
TYPEOF return 4


Hum, SYMSXP
CAR(e) -> c
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> :::
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> ..getNamespace
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> as.environment
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> if
TYPEOF(op) 7

inside do_if


Hum, SYMSXP
CAR(e) -> ==
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
Will compare
Back to do_if
LEN 3
else if?
calling return eval
TYPEOF(stmt) 6


Hum, SYMSXP
CAR(e) -> {
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> <-
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> paste
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> tolower
TYPEOF(op) 3


Hum, SYMSXP
CAR(e) -> $
TYPEOF(op) 7
TYPEOF return 16


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8


Hum, SYMSXP
CAR(e) -> cat
TYPEOF(op) 3
Will compare


Hum, SYMSXP
CAR(e) -> lazyLoadDBfetch
TYPEOF(op) 8
R-3.6.2
@afourpaper
